; ESP32 Wildlife Camera PlatformIO Configuration
; =============================================
; 
; Complete AI-powered wildlife camera system with:
; - Motion detection (PIR + frame difference)
; - AI-based wildlife classification
; - Power management with solar charging
; - Adaptive duty cycling for extended battery life
; - Data collection and storage on SD card
; - Real-time model optimization and calibration

[platformio]
default_envs = esp32-cam
check_skip_packages = yes

# Main ESP32-CAM environment
[env:esp32-cam]
platform = espressif32@6.7.0
board = esp32cam
framework = arduino

# Build flags for ESP32-CAM with optimizations
build_flags = 
    -DCORE_DEBUG_LEVEL=0
    -DBOARD_HAS_PSRAM
    -DARDUINO_RUNNING_CORE=1
    -DARDUINO_EVENT_RUNNING_CORE=1
    
    # AI/ML optimizations
    -DESP32_AI_ENABLED=1
    -DTFLITE_MICRO_ENABLED=1
    -DAI_POWER_OPTIMIZATION=1
    
    # Memory optimizations
    -DCONFIG_SPIRAM_USE_MALLOC=1
    -DCONFIG_SPIRAM_SUPPORT=1
    
    # Performance optimizations
    -O2
    -ffast-math
    -funroll-loops
    
    # System configuration
    -DWILDLIFE_CAM_VERSION="2.0.0"
    -DMAX_DAILY_TRIGGERS=100
    -DIMAGE_COMPRESSION_ENABLED=1

# Monitor configuration
monitor_speed = 115200
monitor_filters = esp32_exception_decoder

# Upload configuration
upload_speed = 921600

# Libraries with pinned versions for offline builds
lib_deps = 
    # Camera support
    espressif/esp32-camera@2.0.4
    
    # Environmental sensors
    adafruit/Adafruit BME280 Library@2.2.2
    adafruit/Adafruit Unified Sensor@1.1.14
    adafruit/Adafruit TSL2591 Library@1.4.1
    adafruit/Adafruit SGP30 Sensor@2.0.0
    sparkfun/SparkFun MAX1704x Fuel Gauge Arduino Library@1.0.4
    milesburton/DallasTemperature@3.11.0
    paulstoffregen/OneWire@2.3.7
    
    # JSON handling
    bblanchon/ArduinoJson@6.21.3
    
    # Time management
    paulstoffregen/Time@1.6.1
    
    # File system
    arduino-libraries/SD@1.2.4
    
    # TensorFlow Lite Micro (local implementation)
    # tensorflow/tflite-micro would be added here when available

# Partition scheme for large app
board_build.partitions = huge_app.csv
board_build.filesystem = littlefs

# Flash settings
board_build.flash_mode = qio
board_build.f_flash = 80000000L
board_build.f_cpu = 240000000L

# Validation environment for offline development
[env:validation]
platform = native
build_flags = 
    -DESP32_VALIDATION_BUILD=1
    -DARDUINO=200
    -I./include
    -I./src
check_tool = clangtidy, cppcheck
check_skip_packages = yes
check_flags = 
    clangtidy: --checks=-*,readability-*,performance-*,modernize-*
    cppcheck: --enable=all --inconclusive --std=c++17